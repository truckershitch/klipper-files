#!/usr/bin/env python3
#
# update-blt-screws-ztilt-cfg.py
#
# This script sets your [bltouch]
# [screws_tilt_adjust] settings
# with x,y offsets and screw positions set
# in the script or with the x,y offsets
# stated on the command line.  It writes
# new files as specified by the OUTFILES
# variable.
#
# Created July 25, 2021
# Modified January 10, 2022

import sys
from datetime import datetime
from update_cfg_conf import *

def f_fmt(val, places=1):
    'Format value to fixed number of decimal places'
    float_fmt = '%%.0%sf' % places
    return float_fmt % val

offset = {
    'x': float(X_OFF),
    'y': float(Y_OFF),
    'cfg_x': f_fmt(X_OFF),
    'cfg_y': f_fmt(Y_OFF)
}

if len(sys.argv) > 3:
    print('Too many arguments.\nNeed BLT X offset and BLT Y offset')
elif len(sys.argv) == 1:
    print('Using default x and y offset values: (%s, %s)' % (offset['cfg_x'], offset['cfg_y']))

else:
    offset = {
        'x': float(sys.argv[1]),
        'y': float(sys.argv[2]),
        'cfg_x': f_fmt(sys.arg[1]),
        'cfg_y': f_fmt(sys.argv[2])
    }
    print('Using x and y offsets overrides (%s, %s)' % (offset['cfg_x'], offset['cfg_y']))

ZT_POS_X_MIN = f_fmt(ZT_BED_X_MIDPT - ZT_STEPPER_X_MIDPT - offset['x'])
ZT_POS_X_MAX = f_fmt(ZT_BED_X_MIDPT + ZT_STEPPER_X_MIDPT - offset['x'])
ZT_POS_Y = ZT_BED_X_MIDPT - offset['y']

ZT_POINTS_X_MIN = f_fmt(SCREW_X_MIN - offset['x'])
ZT_POINTS_X_MAX = f_fmt(SCREW_X_MAX - offset['x'])
ZT_POINTS_Y_MIN = f_fmt(SCREW_Y_MIN - offset['y'])
ZT_POINTS_Y_MAX = f_fmt(SCREW_Y_MAX - offset['y'])

SCREW_ADJ_X_MIN = f_fmt(SCREW_X_MIN - offset['x'])
SCREW_ADJ_X_MAX = f_fmt(SCREW_X_MAX - offset['x'])
SCREW_ADJ_Y_MIN = f_fmt(SCREW_Y_MIN - offset['y'])
SCREW_ADJ_Y_MAX = f_fmt(SCREW_Y_MAX - offset['y'])

SCREW_DATA = (
    {
        'name': 'front left screw',
        'xy': '%s, %s' % (SCREW_ADJ_X_MIN, SCREW_ADJ_Y_MIN)
    },
    {
        'name': 'front right screw',
        'xy': '%s, %s' % (SCREW_ADJ_X_MAX, SCREW_ADJ_Y_MIN)
    },
    {
        'name': 'rear right screw',
        'xy': '%s, %s' % (SCREW_ADJ_X_MAX, SCREW_ADJ_Y_MAX)
    },
    {
        'name': 'rear left screw',
        'xy': '%s, %s' % (SCREW_ADJ_X_MIN, SCREW_ADJ_Y_MAX)
    }
)

outfiles = OUTFILES_TEST if TESTING else OUTFILES_LIVE

def write_header(index):
    f.write('# %s\n' % outfiles[index])
    f.write('# Generated by update-blt-screws-ztilt-cfg.py %s\n#\n' %
        datetime.now().strftime("%Y-%m-%d %I:%M:%S %p"))
    f.write('# Using:\n# x_offset = %s\n# y_offset = %s\n' %
        (offset['x'], offset['y']))

with open(outfiles['BLT'], 'w') as f:
    write_header('BLT')

    f.write('\n[bltouch]\n')
    f.write('sensor_pin: %s\n' % BLT_SENSOR_PIN)
    f.write('control_pin: %s\n' % BLT_CONTROL_PIN)
    f.write('x_offset: %s\n' % offset['cfg_x'])
    f.write('y_offset: %s\n\n' % offset['cfg_y'])

    f.write('[safe_z_home]\n')
    f.write('home_xy_position: %s, %s\n'
        % (BLT_HOME_X_POS, BLT_HOME_Y_POS))
    f.write('z_hop: %s\n' % BLT_Z_HOP)
    f.write('z_hop_speed: %s\n\n' % BLT_Z_HOP_SPEED)

    f.write('[bed_mesh]\n')
    f.write('speed: %s\n' % MESH_SPEED)
    f.write('horizontal_move_z: %s\n' % MESH_HORIZ_MOVE_Z)
    f.write('mesh_min: %s, %s\n' %
        (
            MESH_MARGIN,
            MESH_MARGIN
        )
    )
    f.write('mesh_max: %s, %s\n' %
        (
            BED_X_MAX - MESH_MARGIN,
            BED_Y_MAX - MESH_MARGIN
        )
    )
    f.write('probe_count: %s, %s\n' % (MESH_PROBE_CNT_X, MESH_PROBE_CNT_Y))
    f.write('algorithm: %s\n' % MESH_ALG)
    f.write('fade_start: %s\n' % MESH_FADE_START)
    f.write('fade_end: %s\n' % MESH_FADE_END)
    f.write('fade_target: %s\n' % MESH_FADE_TARGET)

print('Wrote [bltouch] configuration to %s' % outfiles['BLT'])

with open(outfiles['SCREW'], 'w') as f:
    write_header('SCREW')

    f.write('%s\n' % SCREW_HEADER)

    f.write('[screws_tilt_adjust]\n')
    for i in range(4):
        f.write('screw%d: %s\n' % (i + 1, SCREW_DATA[i]['xy']))
        f.write('screw%d_name: %s\n' % (i + 1, SCREW_DATA[i]['name']))

    f.write('horizontal_move_z: %s\n' % SCREW_HORIZ_MOVE_Z)
    f.write('speed: %s\n' % SCREW_SPEED)
    f.write('screw_thread: %s\n' % SCREW_THREAD)

print('Wrote [screws_tilt_adjust] configuration to %s' % outfiles['SCREW'])

with open(outfiles['ZT'], 'w') as f:
    write_header('ZT')

    # comments
    f.write('#\n# Stepper motors are %d mm apart: midpoint = %s\n' %
        (ZT_STEPPER_X_DIST, ZT_STEPPER_X_MIDPT))
    f.write('# Printer bed is %d x %d; x_midpoint = %s, y_midpoint = %s\n' %
        (BED_X_MAX, BED_Y_MAX, ZT_BED_X_MIDPT, ZT_BED_Y_MIDPT))
    f.write('# Subtract offsets from starting coordinates\n#\n')

    f.write('# ** z_postions **\n')
    f.write('# Start X1,X2 at %s +/- %s -> [%s, %s]; Y1 = Y2 = %s\n' %
        (
            ZT_BED_X_MIDPT,
            ZT_STEPPER_X_MIDPT,
            ZT_BED_X_MIDPT - ZT_STEPPER_X_MIDPT,
            ZT_BED_X_MIDPT + ZT_STEPPER_X_MIDPT,
            ZT_BED_Y_MIDPT
        )
    )
    f.write('# (X1,Y1) - (%s, %s) = (%s, %s)\n' %
        (offset['cfg_x'], offset['cfg_y'], ZT_POS_X_MIN, ZT_POS_Y))
    f.write('# (X2,Y2) - (%s, %s) = (%s, %s)\n#\n' %
        (offset['cfg_x'], offset['cfg_y'], ZT_POS_X_MAX, ZT_POS_Y))

    f.write('# ** points **\n')
    f.write('# Bed Screws Xmin,Xmax = [%s, %s]\n' %
        (SCREW_X_MIN, SCREW_X_MAX))
    f.write('# Bed Screws Ymin,Ymax = [%s, %s]\n' %
        (SCREW_Y_MIN, SCREW_Y_MAX))

    f.write('# (Xmin,Ymin) - (%s, %s) = (%s, %s)\n' %
        (offset['cfg_x'], offset['cfg_y'], ZT_POINTS_X_MIN, ZT_POINTS_Y_MIN))
    f.write('# (Xmax,Ymax) - (%s, %s) = (%s, %s)\n\n' %
        (offset['cfg_x'], offset['cfg_y'], ZT_POINTS_X_MAX, ZT_POINTS_Y_MAX))

    # config
    f.write('[z_tilt]\n')
    f.write('z_positions: %s, %s\n' %
        (ZT_POS_X_MIN, ZT_POS_Y))
    f.write('    %s, %s\n' %
        (ZT_POS_X_MAX, ZT_POS_Y))
    f.write('points: %s, %s\n' %
        (ZT_POINTS_X_MIN, ZT_POINTS_Y_MIN))
    f.write('    %s, %s\n' %
        (ZT_POINTS_X_MAX, ZT_POINTS_Y_MIN))
    f.write('    %s, %s\n' %
        (ZT_POINTS_X_MAX, ZT_POINTS_Y_MAX))
    f.write('    %s, %s\n' %
        (ZT_POINTS_X_MIN, ZT_POINTS_Y_MAX))
    f.write('speed: %d\n' %
        (ZT_SPEED))
    f.write('horizontal_move_z: %d\n' %
        (ZT_HORIZ_MOVE_Z))
    f.write('retries: %d\n' %
        (ZT_RETRIES))
    f.write('retry_tolerance: %s\n' %
        f_fmt(ZT_RETRY_TOLERANCE, places=2))

print('Wrote [z_tilt] configuration to %s' % outfiles['ZT'])
